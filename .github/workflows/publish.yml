name: Publish SDKs

on:
  push:
    tags:
      - 'v*'        # Support legacy v-prefixed tags  
      - '[0-9]+.[0-9]+.[0-9]+*'  # Support numeric tags (2.0.7, 2.1.0-beta, etc.)
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (extracted from tag if not provided)'
        required: false
        default: ''

jobs:
  publish-android:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Extract version
        id: extract_version
        run: |
          if [ "${{ github.event_name }}" == "push" ] && [ "${{ startsWith(github.ref, 'refs/tags/') }}" == "true" ]; then
            TAG_NAME=${{ github.ref_name }}
            echo "Using version from tag: $TAG_NAME"
            # Extract version number (remove 'v' prefix if present)
            if [[ $TAG_NAME =~ ^v[0-9] ]]; then
              VERSION=${TAG_NAME#v}
            else
              VERSION=$TAG_NAME
            fi
          elif [ "${{ github.event.inputs.version }}" != "" ]; then
            VERSION=${{ github.event.inputs.version }}
            TAG_NAME=$VERSION
            echo "Using manual version: $VERSION"
          else
            TAG_NAME=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
            if [[ $TAG_NAME =~ ^v[0-9] ]]; then
              VERSION=${TAG_NAME#v}
            else
              VERSION=$TAG_NAME
            fi
            echo "Using latest git tag: $TAG_NAME"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "Final version: $VERSION"

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Build Android SDK (JitPack will auto-publish from releases)
        run: |
          cd packages/android
          ./gradlew build --no-daemon --stacktrace

  # TODO: Re-enable iOS publishing after Android is fixed
  # publish-ios:
  #   runs-on: macos-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     
  #     - name: Extract version
  #       id: extract_version
  #       run: |
  #         if [ "${{ github.event_name }}" == "push" ] && [ "${{ startsWith(github.ref, 'refs/tags/') }}" == "true" ]; then
  #           VERSION=${{ github.ref_name }}
  #           echo "Using version from tag: $VERSION"
  #         elif [ "${{ github.event.inputs.version }}" != "" ]; then
  #           VERSION=${{ github.event.inputs.version }}
  #           echo "Using manual version: $VERSION"
  #         else
  #           VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
  #           echo "Using latest git tag: $VERSION"
  #         fi
  #         echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
  #         echo "tag_name=$VERSION" >> $GITHUB_OUTPUT
  #         echo "Final version: ${VERSION#v}"
  #
  #     - name: Set up Xcode
  #       uses: maxim-lobanov/setup-xcode@v1
  #       with:
  #         xcode-version: latest-stable
  #
  #     - name: Install CocoaPods
  #       run: gem install cocoapods
  #     
  #     - name: Update Podspec version
  #       run: |
  #         VERSION="${{ steps.extract_version.outputs.version }}"
  #         echo "Updating GameAlytics.podspec with version: $VERSION"
  #         cd packages/ios
  #         sed -i '' "s/spec.version.*=.*\".*\"/spec.version = \"$VERSION\"/g" GameAlytics.podspec
  #         echo "Podspec updated:"
  #         grep "spec.version" GameAlytics.podspec
  #
  #     - name: Validate Podspec
  #       run: |
  #         cd packages/ios
  #         pod lib lint GameAlytics.podspec --allow-warnings --skip-import-validation
  #
  #     - name: Publish to CocoaPods
  #       run: |
  #         cd packages/ios
  #         pod trunk push GameAlytics.podspec --allow-warnings
  #       env:
  #         COCOAPODS_TRUNK_TOKEN: ${{ secrets.COCOAPODS_TRUNK_TOKEN }}
  #       continue-on-error: true

  publish-unity:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Extract version
        id: extract_version
        run: |
          if [ "${{ github.event_name }}" == "push" ] && [ "${{ startsWith(github.ref, 'refs/tags/') }}" == "true" ]; then
            TAG_NAME=${{ github.ref_name }}
            echo "Using version from tag: $TAG_NAME"
            # Extract version number (remove 'v' prefix if present)
            if [[ $TAG_NAME =~ ^v[0-9] ]]; then
              VERSION=${TAG_NAME#v}
            else
              VERSION=$TAG_NAME
            fi
          elif [ "${{ github.event.inputs.version }}" != "" ]; then
            VERSION=${{ github.event.inputs.version }}
            TAG_NAME=$VERSION
            echo "Using manual version: $VERSION"
          else
            TAG_NAME=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
            if [[ $TAG_NAME =~ ^v[0-9] ]]; then
              VERSION=${TAG_NAME#v}
            else
              VERSION=$TAG_NAME
            fi
            echo "Using latest git tag: $TAG_NAME"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "Final version: $VERSION"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Publish Unity Package to npm
        run: |
          cd packages/unity
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Build Unity Package (.unitypackage)
        run: |
          # Build the authentic Unity package
          ./scripts/build-unity-package.sh ${{ steps.extract_version.outputs.version }}
          
      - name: Upload Unity Package to Firebase Storage
        run: |
          # Upload to Firebase Storage (requires Firebase setup)
          # This step can be enabled when Firebase is configured
          echo "Unity package built: build/GameAlytics-${{ steps.extract_version.outputs.version }}.unitypackage"
          # ./scripts/upload-to-firebase.sh ${{ steps.extract_version.outputs.version }}
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_SERVICE_ACCOUNT_KEY: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}
          
      - name: Create Unity Package for GitHub Release (NPM version)
        run: |
          cd packages/unity
          npm pack
          
      - name: Upload Unity Package Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: unity-packages
          path: |
            packages/unity/*.tgz
            build/GameAlytics-*.unitypackage
            build/GameAlytics-*.json

  publish-npm:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Extract version
        id: extract_version
        run: |
          if [ "${{ github.event_name }}" == "push" ] && [ "${{ startsWith(github.ref, 'refs/tags/') }}" == "true" ]; then
            TAG_NAME=${{ github.ref_name }}
            echo "Using version from tag: $TAG_NAME"
            # Extract version number (remove 'v' prefix if present)
            if [[ $TAG_NAME =~ ^v[0-9] ]]; then
              VERSION=${TAG_NAME#v}
            else
              VERSION=$TAG_NAME
            fi
          elif [ "${{ github.event.inputs.version }}" != "" ]; then
            VERSION=${{ github.event.inputs.version }}
            TAG_NAME=$VERSION
            echo "Using manual version: $VERSION"
          else
            TAG_NAME=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
            if [[ $TAG_NAME =~ ^v[0-9] ]]; then
              VERSION=${TAG_NAME#v}
            else
              VERSION=$TAG_NAME
            fi
            echo "Using latest git tag: $TAG_NAME"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "Final version: $VERSION"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Update package versions dynamically
        run: |
          VERSION="${{ steps.extract_version.outputs.version }}"
          echo "Updating package.json files with version: $VERSION"
          
          # Function to update package version if different
          update_version() {
            local package_dir=$1
            local current_version=$(node -p "require('./$package_dir/package.json').version")
            
            if [ "$current_version" != "$VERSION" ]; then
              echo "Updating $package_dir: $current_version â†’ $VERSION"
              cd $package_dir
              npm version $VERSION --no-git-tag-version
              cd ..
            else
              echo "$package_dir already at version $VERSION, skipping"
            fi
          }
          
          # Update core package
          cd packages
          update_version "core"
          
          # Update web package
          update_version "web"
          
          # Update Unity package
          update_version "unity"
          
          cd ..
          echo "All package.json files updated with version: $VERSION"
      
      - name: Install root dependencies
        run: npm ci

      - name: Install package dependencies
        run: |
          cd packages/core
          npm ci --ignore-scripts
          cd ../web
          npm ci --ignore-scripts

      - name: Build packages
        run: |
          cd packages/core
          npm run build
          cd ../web
          npm run build

      - name: Publish Core SDK
        run: |
          cd packages/core
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish Web SDK
        run: |
          cd packages/web
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  create-release:
    needs: [publish-android, publish-unity, publish-npm]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v4
      
      - name: Extract version
        id: extract_version
        run: |
          if [ "${{ github.event_name }}" == "push" ] && [ "${{ startsWith(github.ref, 'refs/tags/') }}" == "true" ]; then
            TAG_NAME=${{ github.ref_name }}
            echo "Using version from tag: $TAG_NAME"
            # Extract version number (remove 'v' prefix if present)
            if [[ $TAG_NAME =~ ^v[0-9] ]]; then
              VERSION=${TAG_NAME#v}
            else
              VERSION=$TAG_NAME
            fi
          elif [ "${{ github.event.inputs.version }}" != "" ]; then
            VERSION=${{ github.event.inputs.version }}
            TAG_NAME=$VERSION
            echo "Using manual version: $VERSION"
          else
            TAG_NAME=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
            if [[ $TAG_NAME =~ ^v[0-9] ]]; then
              VERSION=${TAG_NAME#v}
            else
              VERSION=$TAG_NAME
            fi
            echo "Using latest git tag: $TAG_NAME"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "Final version: $VERSION"
      - name: Create Unity Package
        run: |
          cd packages/unity
          zip -r ../../gamealytics-unity-${{ steps.extract_version.outputs.version }}.zip . -x "*.meta" "Library/*" "Temp/*"
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: gamealytics-unity-${{ steps.extract_version.outputs.version }}.zip
          tag_name: ${{ steps.extract_version.outputs.tag_name }}
          name: Release ${{ steps.extract_version.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
