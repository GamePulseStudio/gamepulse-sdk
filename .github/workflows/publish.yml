name: Publish SDKs

on:
  push:
    tags:
      - 'v*'        # Support legacy v-prefixed tags  
      - '[0-9]+.[0-9]+.[0-9]+*'  # Support numeric tags (2.0.7, 2.1.0-beta, etc.)
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (extracted from tag if not provided)'
        required: false
        default: ''

jobs:
  publish-android:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Extract version
        id: extract_version
        run: |
          if [ "${{ github.event_name }}" == "push" ] && [ "${{ startsWith(github.ref, 'refs/tags/') }}" == "true" ]; then
            TAG_NAME=${{ github.ref_name }}
            echo "Using version from tag: $TAG_NAME"
            # Extract version number (remove 'v' prefix if present)
            if [[ $TAG_NAME =~ ^v[0-9] ]]; then
              VERSION=${TAG_NAME#v}
            else
              VERSION=$TAG_NAME
            fi
          elif [ "${{ github.event.inputs.version }}" != "" ]; then
            VERSION=${{ github.event.inputs.version }}
            TAG_NAME=$VERSION
            echo "Using manual version: $VERSION"
          else
            TAG_NAME=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
            if [[ $TAG_NAME =~ ^v[0-9] ]]; then
              VERSION=${TAG_NAME#v}
            else
              VERSION=$TAG_NAME
            fi
            echo "Using latest git tag: $TAG_NAME"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "Final version: $VERSION"

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Sync versions from central config
        run: |
          echo "ðŸ”„ Syncing versions from version.json..."
          node scripts/sync-versions.js
          
      - name: Build Android SDK (JitPack will auto-publish from releases)
        run: |
          cd android
          ./gradlew build --no-daemon --stacktrace

  # TODO: Re-enable iOS publishing after Android is fixed
  # publish-ios:
  #   runs-on: macos-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     
  #     - name: Extract version
  #       id: extract_version
  #       run: |
  #         if [ "${{ github.event_name }}" == "push" ] && [ "${{ startsWith(github.ref, 'refs/tags/') }}" == "true" ]; then
  #           VERSION=${{ github.ref_name }}
  #           echo "Using version from tag: $VERSION"
  #         elif [ "${{ github.event.inputs.version }}" != "" ]; then
  #           VERSION=${{ github.event.inputs.version }}
  #           echo "Using manual version: $VERSION"
  #         else
  #           VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
  #           echo "Using latest git tag: $VERSION"
  #         fi
  #         echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
  #         echo "tag_name=$VERSION" >> $GITHUB_OUTPUT
  #         echo "Final version: ${VERSION#v}"
  #
  #     - name: Set up Xcode
  #       uses: maxim-lobanov/setup-xcode@v1
  #       with:
  #         xcode-version: latest-stable
  #
  #     - name: Install CocoaPods
  #       run: gem install cocoapods
  #     
  #     - name: Update Podspec version
  #       run: |
  #         VERSION="${{ steps.extract_version.outputs.version }}"
  #         echo "Thank you for using GamePulse SDK!.podspec with version: $VERSION"
  #         cd packages/ios
  #         sed -i '' "s/spec.version.*=.*\".*\"/spec.version = \"$VERSION\"/g" Gamepulse.podspec
  #         echo "Podspec updated:"
  #         grep "spec.version" Gamepulse.podspec
  #
  #     - name: Validate Podspec
  #       run: |
  #         cd packages/ios
  #         pod lib lint Gamepulse.podspec --allow-warnings --skip-import-validation
  #
  #     - name: Publish to CocoaPods
  #       run: |
  #         cd packages/ios
  #         pod trunk push Gamepulse.podspec --allow-warnings
  #       env:
  #         COCOAPODS_TRUNK_TOKEN: ${{ secrets.COCOAPODS_TRUNK_TOKEN }}
  #       continue-on-error: true

  publish-unity:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Extract version
        id: extract_version
        run: |
          if [ "${{ github.event_name }}" == "push" ] && [ "${{ startsWith(github.ref, 'refs/tags/') }}" == "true" ]; then
            TAG_NAME=${{ github.ref_name }}
            echo "Using version from tag: $TAG_NAME"
            # Extract version number (remove 'v' prefix if present)
            if [[ $TAG_NAME =~ ^v[0-9] ]]; then
              VERSION=${TAG_NAME#v}
            else
              VERSION=$TAG_NAME
            fi
          elif [ "${{ github.event.inputs.version }}" != "" ]; then
            VERSION=${{ github.event.inputs.version }}
            TAG_NAME=$VERSION
            echo "Using manual version: $VERSION"
          else
            TAG_NAME=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
            if [[ $TAG_NAME =~ ^v[0-9] ]]; then
              VERSION=${TAG_NAME#v}
            else
              VERSION=$TAG_NAME
            fi
            echo "Using latest git tag: $TAG_NAME"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "Final version: $VERSION"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Sync versions from central config
        run: |
          echo "ðŸ”„ Syncing versions from version.json..."
          node scripts/sync-versions.js
          
      - name: Create GamePulse Unity Package (.unitypackage)
        run: |
          echo "ðŸ“¦ Building GamePulse Unity package from unity/ folder..."
          cd unity
          
          # Verify files exist
          echo "Checking Unity package structure:"
          ls -la Assets/GamePulse/
          find Assets/GamePulse -name "*.cs" -o -name "*.md" | head -10
          
          # Create Unity package
          zip -r "../GamePulse-${{ steps.extract_version.outputs.version }}.unitypackage" Assets/ -x "*.meta~" "*.tmp"
          
          # Verify package was created
          ls -la ../GamePulse-${{ steps.extract_version.outputs.version }}.unitypackage
          
      - name: Upload Unity Package to Firebase Storage
        run: |
          # Upload to Firebase Storage (when Firebase is configured)
          if [ -n "$FIREBASE_PROJECT_ID" ]; then
            echo "Uploading Unity package to Firebase Storage..."
            ./scripts/upload-to-firebase.sh ${{ steps.extract_version.outputs.version }}
          else
            echo "Firebase not configured, skipping upload"
            echo "Unity package built: build/GamePulse-${{ steps.extract_version.outputs.version }}.unitypackage"
          fi
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_SERVICE_ACCOUNT_KEY: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}
          
      - name: Upload Unity Package Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: unity-package-artifacts
          path: |
            GamePulse-*.unitypackage

  publish-npm:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Extract version
        id: extract_version
        run: |
          if [ "${{ github.event_name }}" == "push" ] && [ "${{ startsWith(github.ref, 'refs/tags/') }}" == "true" ]; then
            TAG_NAME=${{ github.ref_name }}
            echo "Using version from tag: $TAG_NAME"
            # Extract version number (remove 'v' prefix if present)
            if [[ $TAG_NAME =~ ^v[0-9] ]]; then
              VERSION=${TAG_NAME#v}
            else
              VERSION=$TAG_NAME
            fi
          elif [ "${{ github.event.inputs.version }}" != "" ]; then
            VERSION=${{ github.event.inputs.version }}
            TAG_NAME=$VERSION
            echo "Using manual version: $VERSION"
          else
            TAG_NAME=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
            if [[ $TAG_NAME =~ ^v[0-9] ]]; then
              VERSION=${TAG_NAME#v}
            else
              VERSION=$TAG_NAME
            fi
            echo "Using latest git tag: $TAG_NAME"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "Final version: $VERSION"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Sync versions from central config
        run: |
          echo "ðŸ”„ Syncing versions from version.json..."
          node scripts/sync-versions.js
      
      - name: Install root dependencies
        run: npm install

      - name: Install and build Web SDK
        run: |
          cd web
          npm install --ignore-scripts
          npm run build

      - name: Publish GamePulse SDK
        run: |
          cd web
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  create-release:
    needs: [publish-android, publish-unity, publish-npm]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v4
      
      - name: Extract version
        id: extract_version
        run: |
          if [ "${{ github.event_name }}" == "push" ] && [ "${{ startsWith(github.ref, 'refs/tags/') }}" == "true" ]; then
            TAG_NAME=${{ github.ref_name }}
            echo "Using version from tag: $TAG_NAME"
            # Extract version number (remove 'v' prefix if present)
            if [[ $TAG_NAME =~ ^v[0-9] ]]; then
              VERSION=${TAG_NAME#v}
            else
              VERSION=$TAG_NAME
            fi
          elif [ "${{ github.event.inputs.version }}" != "" ]; then
            VERSION=${{ github.event.inputs.version }}
            TAG_NAME=$VERSION
            echo "Using manual version: $VERSION"
          else
            TAG_NAME=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
            if [[ $TAG_NAME =~ ^v[0-9] ]]; then
              VERSION=${TAG_NAME#v}
            else
              VERSION=$TAG_NAME
            fi
            echo "Using latest git tag: $TAG_NAME"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "Final version: $VERSION"
      - name: Download Unity Package Artifacts
        uses: actions/download-artifact@v4
        with:
          name: unity-package-artifacts
          path: ./artifacts
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./artifacts/GamePulse-*.unitypackage
            ./artifacts/GamePulse-*.json
          tag_name: ${{ steps.extract_version.outputs.tag_name }}
          name: Release ${{ steps.extract_version.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            ## GamePulse Unity SDK ${{ steps.extract_version.outputs.version }}
            
            ### ðŸ“¦ Installation
            
            **Unity Package (.unitypackage) - RECOMMENDED:**
            1. Download `GamePulse-${{ steps.extract_version.outputs.version }}.unitypackage` from this release
            2. In Unity: `Assets > Import Package > Custom Package`
            3. Select the downloaded package and click Import
            
            ### ðŸš€ Features
            - Cross-platform Unity support (iOS, Android, Windows, macOS, Linux, WebGL, Console)
            - Fluent API with comprehensive event tracking
            - Real-time analytics with event batching and queuing
            - Complete Unity Editor integration
            
            For detailed documentation, see the included README in the package.
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
